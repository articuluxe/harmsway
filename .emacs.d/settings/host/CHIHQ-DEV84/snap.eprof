;; -*- Mode: Emacs-Lisp -*-
;;
;;

(defun snap-add-c-headers (project-root)
  (when c-buffer-is-cc-mode
    (make-local-variable 'achead:include-directories)
    (add-to-list 'achead:include-directories clib-root)
;    (add-to-list 'achead:include-directories boost-root)
    ))

;; (defvar profile-local-tags-dir-root "~/src/tags/")
;; (defun profile-remote-host (file)
;;   (if (tramp-tramp-file-p file)
;;       (tramp-file-name-host (tramp-dissect-file-name file))
;;     nil))
;; (defun profile-local-tags-dir (file root)
;;   (let ((host (profile-remote-host file)))
;;     (if host
;;         (concat (replace-regexp-in-string "\\/" "!" root t nil)
;;                 "/" profile-local-tags-dir-root host "/"
;;                 "/"
;;                 ) nil)))

(defun add-snap-tags (project-root)
;  (let ((base (profile-local-tags-dir default-directory project-root)))
  (message "add-snap-tags profile-current %s tags-dir %s"
           (profile-current-name) (profile-current-get 'tags-dir))
  (setq etags-table-alist
          (cons (list (concat
                       "^\\(.*\\)"
                       (profile-current-get 'project-root-stem)
                       "\\(.*\\)$")
                      (expand-file-name
                       (concat (profile-current-get 'tags-dir) "TAGS"))
                      (expand-file-name
                       (concat (profile-current-get 'tags-dir) "clib-tags"))
                ) etags-table-alist)))

;; define the profile
(profile-define-derived "snap" "default" "dan.harms" "dan.harms@xrtrading.com"
                        'project-name "snap"
                        'project-root-dir "~/src/2.18/"
                        'build-sub-dir "debug/"
                        'src-sub-dir "snap/xr-snap/src/"
                        'on-file-open 'snap-add-c-headers
                        'on-profile-init 'add-snap-tags
                        )
(setq profile-path-alist (cons (cons "src/2.18/snap" "snap")
                               profile-path-alist))

;; mode line
(add-to-list 'sml/replacer-regexp-list '("~/src/[^/]+/snap" ":SNAP:") t)
(set-register ?\C-r (cons 'file (profile-current-get 'project-root-dir)))
(set-register ?\C-s (cons 'file
                          (concat
                           (profile-current-get 'project-root-dir)
                           (profile-current-get 'src-sub-dir))))

(defun my/etags-file-of-tag (&optional relative)
  (save-excursion
    (re-search-backward "\f\n\\([^\n]+\\),[0-9]*\n")
    (let ((str (convert-standard-filename
                (buffer-substring (match-beginning 1) (match-end 1)))))
      (if relative str
        (let ((basedir (file-truename default-directory)))
          (if (file-remote-p basedir)
              (with-parsed-tramp-file-name basedir nil
                (message "drh *** str=%s basedir=%s result=%s"
                         str basedir
                         (expand-file-name
                          (apply 'tramp-make-tramp-file-name
                                 (list method user host str hop))))
                (expand-file-name (apply 'tramp-make-tramp-file-name
                                         (list method user host str hop))))
            (expand-file-name str basedir)))))))
;(setq file-of-tag-function 'my/etags-file-of-tag)
