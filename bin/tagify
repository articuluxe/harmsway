#!/usr/bin/env sh

dir=`findRoot`
output_dir=$dir/tags
force_overwrite=
cpp_kinds=+l
cpp_options="--c++-kinds=$cpp_kinds --file-scope=no --tag-relative=no"
c_loc=$(eval echo \$\{CSTDLIB_ROOT\})
c_file=$output_dir/clib-tags
boost_loc=$(eval echo \$\{BOOST_ROOT\})
boost_file=$output_dir/boost-tags
proto_c_file=$dir/src/proto-c-tags
proto_file=$dir/src/proto-tags

if [ "x$dir" = x ]; then
   echo "Error: $0 did not find the project root."
   exit
fi

if [ $# -gt 0 ] ; then
   if [ "-" != "$1" ]; then
      force_overwrite=$1
   fi
   shift
fi

if [ ! -r $c_file ] || [ ! "x$force_overwrite" = x ] ; then
   echo "Generating TAGS for $c_loc into $c_file"
   ctags -Re --language-force=c++ -h=".h.H.hh.hpp.hxx.h++.inc.def." $cpp_options -f $c_file $c_loc
fi
if [ ! -r $boost_file ] || [ ! "x$force_overwrite" = x ]; then
   echo "Generating TAGS for $boost_loc into $boost_file"
   ctags -Re $cpp_options --exclude=typeof --exclude=phoenix --exclude=spirit -f $boost_file $boost_loc
fi

# ctags -Re $cpp_options -f $proto_c_file $dir/build/make/protobuf_dir
# ctags -Re $cpp_options --langdef=pb --langmap=pb:.proto --regex-pb="/(message|enum)[ \t]+([^ \t{]+)/\2/" -f $proto_file $dir/src/protobuf_dir
echo "Generating TAGS recursively from `pwd` into $output_dir/TAGS"
ctags -Re $cpp_options -f $output_dir/TAGS
#--etags-include=$c_file --etags-include=$boost_file
#--etags-include=$proto_file --etags-include=$proto_c_file
echo "Done generating TAGS file."

# to include local variables (l) and function prototypes (p):
# ctags --c++-kinds=+lp -Re

# echo 'TAGS' > ./.gitignore
