# -*- Mode: org; -*-
#+TITLE:Emacs Commands

* Debug
M-x toggle-debug-on-error
M-: (setq debug-on-error t)
C-x C-e      eval-last-sexp
M-C-x        eval-defun
M-x debug-on-entry <func>
(debug nil (current-buffer))
trace-function 
M-x pp-macroexpand-last-sexp
# find out what emacs is blocking on
#+BEGIN_SRC sh
pkill -USR2 emacs
sudo strace -yy -p `pidof emacs`
#+END_SRC

C-x RET f unix   change buffer's file coding system
C-x C-m f   change file's default text encoding
C-q <x>     to enter control character <x>
C-c C-s     check line syntax
C-u C-x =
list-faces-display   list and display faces
C-x C-+   enlarge font
C-x C--    decrease font

* Help
C-h i      bring up the info menu
m <topic>  jump to <topic>

* Fonts
;; select font on graphical systems
(x-select-font nil t)
;; increase/decrease font size dynamically
C-x C-+   /   C-x C--

(@> "Bookmark List")
(@> "Bookmark Tags")

* Bookmarks
** List
;; (@* "List") (C-x p)
M-d >         open dired for marked
M-q           query-replace in marked files
C-h p         describe current
C-h >         describe marked
r             rename
M-r/R         relocate [marked]
e/E           edit [marked]
C-c C-c       exit editing buffer
S             save
g             refresh
C-u g         revert to file
J/j           jump to bookmark [other window]
j >           jump to each marked bookmark in other windows
L/l           replace/add bookmarks from file
M-l           load marked bookmark files
C-x p 0       make new empty bookmark file
C-x p w       save as bookmarks file
C-x p y       create bookmark file bookmark
D             delete marked
Y > +/-       copy/move marked to other file
Y > 0         add marked to new bookmark file. C-u: create a bookmark to it
>/<           show only marked/unmarked bookmarks
F M           mark file bookmarks
F S           show only file bookmarks
.             show all bookmarks, turn off sorting
s s           cycle sorting
s r           reverse sorting
s b           sort by last file/buffer access
s v           sort by bookmark visit frequency
C-x p ,       view bookmark list for current buffer
** Tags
;; (@* "Tags") (C-x p t)
C-x p ?       describe bookmark
T +           add
T -           remove
T 0           remove all
T l           list all tags
T e           edit tags
T r           rename tag
T d           remove tags from all bookmarks
T c/M-w       copy tags
T p/C-y       add yanked tags
T q           replace with yanked tags
T m/u [* + % ~]   tag [un]mark all, some, regexp, not
** Set (C-x p)
C-x p m       set bookmark
C-x p RET     set/delete autonamed bookmark (with prefix, delete all in current buffer)
C-x p c a     set autofile bookmark
C-x p e       view bookmarks
C-x p d       delete bookmark
C-x p ,       view bookmarks in current file
** Jump (C-x j)
C-x [4] j j   jump to bookmark [other window]
C-x p o       jump other window
C-x j t % +   jump to bookmark with tag matching regex
C-x j y       load a bookmark file [switch with prefix]
C-x j a       visit autofile bookmark
C-x j , ,     jump to bookmark in current buffer
** Cycle
C-x p p/n [down/up]       cycle prev/next bookmark in current buffer
C-x p b/f [right/left]    cycle prev/next bookmark in list
** Old
C-x r m [%n] set file's bookmark [possibly named %n] at point
C-x r b %n   jump to bookmark %n
C-x r l      list all bookmarks

* Calc
d 2         decimal display
d 6         hexadecimal display
d 0         base-10 display
d z         show leading zeros
b a         bitwise AND
b o         bitwise OR
b x         bitwise XOR
b n         bitwise NOT
b l         shift left
b r         shift right
b d         bitwise DIFF, e.g. DIFF(a,b)=AND(a,NOT(b))
B           with (a b), calculates log(b) a
Q           square root

* Register
C-x r s %d copy region into register %d
C-u C-x r s %d cut text into register %d
C-x r i %d insert register %d
C-x r  +     append text to register
C-x r <sp> %d  save position in register %d
C-x r j %d   jump to register %d
C-x r w %d   store selected frame's window config in register %d
C-x r f %d   save state of all frames in register %d

* 2-Column mode
C-x 6 2     enter 2-column mode
C-x 6 s     split current buffer into 2 columns using separator before point
C-x 6 b     enter 2-column mode by associating another buffer
C-x 6 RET   enter newline in both columns
C-x 6 1     merge both columns back into 1
C-x 6 d     dissociate the 2 buffers

* Ido
C-l     reread directory
C-t     toggle regexp
C-p    toggle prefix/substring match
C-c    toggle case-sensitivity
C-d     dired
M-n, M-p   prior history
C-f, C-b   fall back to traditional methods
M-m    create directory in current dir

* Macro
C-x (        start recording keyboard macro
C-x )        stop recording
C-x e        replay
C-x C-k b    bind last macro to a key sequence
C-x C-k 0-9  good macro key sequences
C-x C-k n    give last macro a name
C-x C-k r    apply macro to all lines in region
C-x q        pause macro and read input (kbd-macro-query)

* Popwin
[f1]
b   Popup buffer
l    Popup last buffer
f    Find file
1   temporarily enlarge buffer, C-g exits

* Text
M-s          center a line horizontally
M-i          move to next tab stop
M-m          move to first non-blank character on line
C-x TAB   shift lines

C-l        recenter (center, top, bottom)
M-C-l  smart recenter
C-u 0 C-l    scroll current line to top of buffer
M-%d         repeat command %d times
C-u %d       repeat command %d times [defaults to 4]
C-x z        repeat prev. command
C-x esc esc    Repeat last minibuffer command
C-g          cancel
C-x u        undo
** Shells/redirection
M-!          run shell
M-|     run shell with selection piped as input
C-u M-!      paste result of shell command into buffer

M-p          previous command in minibuffer history
M-n          next command in minibuffer history
C-u C-<sp>   goto last mark in current buffer
C-x C-<sp>   goto last mark in all buffers
** Cursor movement
C-a         move to start of line
C-e         move to end of line
M-f         move forward 1 word
M-b         move back 1 word
M-{         move to start of paragraph
M-}         move to end of paragraph
M-<         move to top of buffer
M->         move to end of buffer
C-v         page down
M-v         page up
C-u C-space   move to last edit point
C-j         newline-and-indent
M-^       merge 2 lines
M-C-o    split line
C-x C-x    move to last mark
M-g g    goto line

M-@      mark word
C-t         transpose 2 chars
M-t         transpose 2 words
C-M-t      transpose 2 sexp's (arg of 0 transposes point and mark)
C-x C-t     transpose 2 lines
M-l         convert word to lowercase [preface with \M-- to change last word]
M-u         convert word to uppercase
M-c         convert word to capitalized initial
C-x C-l     convert region to lower-case
C-x C-u     convert region to upper-case

* Buffers
C-x b       move to buffer
C-x C-b     list buffers
C-x k       kill buffer
C-x 2       split window vertically
C-x 3       split window horizontally
C-x o       select other window
C-x 0       delete current window
C-x 1       delete other windows
C-x 4 0     close current window, kill buffer
C-x <left,right> switch to next/prior buffer
C-x ^       make window taller
C-x }       make window wider
C-x {       make window narrower
C-x -       shrink window to fit
C-x +       balance window heights
M-C-v       scroll other window
C-x <       scroll window left
C-x >       scroll window right
C-x 4 o     select buffer in other window
C-x 4 f     load file in new window
C-x 5 2     create new frame from buffer
C-x 5 b     select buffer in new frame
C-x 5 f     load file in new frame
C-x 5 0     delete frame
C-x 5 o     select other frame
C-x 5 1     delete other frames
C-x C-q     toggle read-only

* Yanking
C-k         kill line forward
M- C-k    Kill line backward
M-d         kill word forward
M-DEL       kill word backward
M-z %d      kill up to <d> (zap-to-char)
C-y         paste killed text
C-u C-y paste forward
M-y         paste previously killed text
C-w         kill region
M-C-w   append to previously killed
C-o         insert blank line
C-x C-o     delete all but 1 consecutive blank lines
M-\         delete horizontal space
M-<sp>      delete horizontal space but leave one space
M-k         kill forward to sentence end
C-x DEL   kill backward to sentence start

* Rectangle
C-x SPC     rectangular mark
C-x r k     kill rectangle
C-x r d     delete rectangle
C-x r y     yank rectangle
C-x r o     insert blank space into rectangle
C-x r t     insert string into rectangle
M-x clear-rectangle  replace rectangle with spaces

* Isearch
C-s         search forward
C-r         search backward
M-C-s       search forward (regexp)
M-C-r       search backward (regexp)
** During search
M-e         edit search string
C-w         insert search string from point
M-C-y       increase search string 1 char
M-C-w       decrease search string 1 char
M-y         yank last string
M-s C-e     add rest of line to search string
C-j         resume searching
M-c         toggle case-sensitivity during search
M-r         toggle regexp
M-s w       search whole words
M-s _       search whole symbols
M-s i       search in invisible text
M-s '       toggle character folding
M-s SPC     toggle whitespace matching
M-s e       edit search string
*** With last search string
M-%         launch query-replace
C-M-%       launch query-replace-regexp
M-s o       launch occur
M-s h r     highlight regexp
** Search history
M-n         search for next item in search ring
M-p         search for previous item in search ring
C-M-i       complete search string using history
** Query/replace
M-%         query replace
^              Prior occurrence
,      Replace but don't move on
C-q C-j     search/replace new line (\n)
C-r       recursive editing
C-w    delete, then recursive edit
M-C-c    Stop recursive edit
C-]     stop recursive edit and replacement
E        edit replacement string
C-_       undo last replacement
M-s o     occur mode


* Dired
d mark for deletion
m/u    mark/unmark
*!  unmark all files (also U)
%d mark for deletion with regex
u remove deletion mark
x delete marked files
f or Enter   visit file
o   visit file in other window
C-o   Visit file in other window in background
i      insert subdirectory
C-u k  remove subdirectory from header line
^   Visit parent directory 
$   toggle subdirectory 
M-$   hide all subdirectories
C  copy marked files
D  delete marked files
R  rename marked files
C-_      undo dired changes
A   search by regex
M-,    Next search result
Q    replace by regexp
t          toggle mark
*c     change mark
%m     mark by regexp file name
%g      mark by regexp contained
%R    file rename by regex
** Dired commands
find-name-dired
find-dired     (recursive)
find-grep-dired


* Regexp
\s-   white space 
\,(match-string 10)   regexp replacement quoted group > 10


* Files
C-x C-f     load file
C-x C-s     save file
C-x s       save all
C-x C-w     save as
C-x i       insert file
M-x revert-buffer
C-x l      line count
C-u M-=   word count region 

* C++ Mode
C-x h       select buffer
M-C-h       select function
C-c C-q     indent function
M-C-\       indent region
  Prefix with M-%n to align to left margin with %n spaces
M-C-q       indent expression
M-C-a       move to beginning of function
M-C-e       move to end of function
M-a         move to beginning of statement
M-e         move to end of statement
M-C-f       move forward by sexp or parentheses
M-C-b       move backward by sexp or parentheses
C-c C-w    toggle subword mode
C-c C-d     toggle hungry-delete
C-d       hungry delete forward
C-c C-d   electric delete forward
M-/         completion/word expansion
M-C-/     dynamic abbrev expansion
C-c C-e     run preprocessor on region
M-;         insert comment
C-u M-;   kill comment
M-C-j       continue comment on next line (see comment-multi-line)
M-q       fill paragraph
C-u M-;     remove comment
C-c C-c     comment region
M-C-q       comment-region
C-c C-\     back-slashify
C-:          insert scope operator ::
C-c <ret>   compile
C-x `       visit next error
C-u C-x `   visit first error
M-g n     visit next error
M-g p     visit previous error
M-x grep    run grep
C-q         quote next character (remove electricity)

M-s o                  occur
M-x multi-occur
M-x occur-rename-buffer

M-x xxx-mode   switch to xxx-mode
M-x apropos mode   list available commands containing “mode”


* Org

** Formatting
*** Text can be /italic/, *bold*, _underlined_, =literal= or ~code~.  Even +strike-thru+!
** Lists
C-c C-c   verify bullet and indentation consistency
C-c -     cycle entire list through bullet types
C-c *     promote a list item into a headline
C-c C-*   promote a list of items into a headline
C-c ^     sort a plain list
*** Unordered lists
     - one :: this is a description
     - two :: this is another description
*** Ordered lists
     1. first
     2. second
*** Checkboxes
**** Add a counter [/]
C-c C-c    [ ] toggle a checkbox in a plain list
 - [ ] Item One
 - [ ] Item Two


** Blocks
< e TAB inserts an example block:
#+BEGIN_EXAMPLE
Text inside here will not be interpreted.
#+END_EXAMPLE

< q TAB inserts a quotation block:
#+BEGIN_QUOTE
This is a quotation block.
#+END_QUOTE

< c TAB inserts a centered block:
#+BEGIN_CENTER
Text in here will be centered when exported.
#+END_CENTER

** Source Blocks
< s TAB: insert source code block:
#+BEGIN_SRC sh
echo "Hello $USER! Today is $(date)"
exit
#+END_SRC

#+RESULTS:
: Hello ! Today is Tue Sep 29 13:12:41 CDT 2015

#+BEGIN_SRC text
[[link][description]]
<<anchor>>
<<<radio target>>>
#+END_SRC

** Links
C-c C-l    insert/edit link
C-c C-o    goto link
C-c &      pop back to prior
C-c %      manually push a link position onto mark-ring
M-M-o-l    org-store-link
M-M-o-c    org-capture
C-c C-x C-v  toggle images inline

[[location][This]] is a link to a <<location>>.

** Outline
C-c -        create a list
M-RET        new heading
M-S-RET      new heading at same level
M-<up/down>  move heading
M-<left/right> promote/demote heading
M-S-<up/down> move section
M-S-<left/right> promote/demote section
C-c C-n/p     next/previous heading
C-c C-f/b     next/previous heading same level
C-c C-u       up to higher level
C-c C-j       jump, maintain outline visibility
C-c TAB       expose children [prefix: n children]
C-u C-u TAB        regain initial buffer visibility
C-u C-u C-u TAB    show all
C-c C-r       reveal context around point
C-c C-k       show all headings, content for one subtree
M-h           mark element
C-c @         mark subtree
C-c C-x M-w   copy subtree
C-c C-x C-w   cut subtree
C-c C-x C-y   paste subtree
C-c C-x c     clone subtree
C-c ^         sort entries
C-c /         create sparse tree
M-g n/p       move forward/back in sparse tree
C-c C-x d     insert drawer

** TODOs
*** Default: #+TODO: TODO | DONE
C-c C-t    select TODO state
M-S-+      promote TODO state
M--        demote TODO state
C-c C-s    schedule a task
C-c C-x p  set a property
C-c C-x o  toggle an entry's ordered property 
     :PROPERTIES:
     :ORDERED t
     :END:

** Priorities
C-c ,       set priority
M-<p/n>     change priority (windmove-disputed)

** Tags
*** Default: #+TAGS: @work @home
C-c C-q    add a tag
C-c C-c    add a tag for current headline
C-c / m    create sparse-tree for matching tags/properties
C-c / p    create sparse-tree for single property or {regexp}
** Clocking
C-c C-x C-i   clock in
C-c C-x C-o   clock out
** Columns
C-c C-x C-c   activate column view


** Agenda
   SCHEDULED: <2029-12-25 Tue>
M-M-o-a     agenda
C-c .       add date
C-c !       add inactive date
C-u C-c .   add date and time
C-c C-d     insert DEADLINE
C-c C-s     insert SCHEDULE 
C-c >       goto calendar for date
C-c / d     sparse tree to check deadlines
C-c / b     sparse tree for deadlines before a date
C-c / a     sparse tree for deadlines after a date
   Repeater: +1h/d/m/w/y :: repeat every hour/day/month/week/year
     ++1w :: when marked done, shift at least 1w, but into future
     .+1m :: when marked done, shift one month from now
Warning:  -2d
Range: [2016-11-07 Mon]--[2016-10-31 Mon]
C-c C-y     calculate length of range [prefix inserts]
C-c C-x c   clone a subtree with a time-shift

** Export
C-c C-e     export
C-c C-w     refile

** Archive
C-c C-x C-a     archive subtree
C-c C-x C-s     archive subtree at point
C-c C-x a       toggle archiving the current headline

** Tables
*** Add width to a column: <12>
*** realign table with narrowed columns at startup: #+STARTUP: align
C-c |         convert region to table
C-c RET     insert divider line and advance to next row
M-RET       split field at cursor, move rest below
C-c C-c     realign table
C-c SPC     blank field at point
TAB, S-TAB  move to next/prior field
RET          move to next row
S-RET        copy from prior row
M-<left/right>   move column left/right
M-<up/down>      move row up/down
M-S-<right>   insert new column to left of cursor
M-S-<left>    kill current column
M-S-<up>      kill current row
M-S-<down>    insert new row above cursor (below with prefix)
C-c -         insert horizontal line
C-c ^         sort rows based on current column
C-c +         sum numbers in current column
C-c `         edit current field in separate window
C-c ?         show current cell
C-c }         show cell grid


* Games
hanoi
gomoku
blackbox
mpuz
5x5
dunnet
lm
life
pong
solitaire
tetris
snake
doctor
yow
zone
